// BSD 3-Clause License
//
// Copyright (c) 2016, 2017, The University of Sydney. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#include "unstructured_loop_detector.dl"

.type Statement
.type Variable
.type Opcode
.type Value
.type Block
      
// INPUT

.decl edge(h:Statement, t:Statement)                // There is a CFG edge from h to t
.input edge
.decl def(var:Variable, stmt:Statement)             // var is defined by stmt
.input def
.decl use(var:Variable, stmt:Statement, i:number)   // var is used by stmt as argument i
.input use
.decl op(stmt:Statement, op:Opcode)                 // stmt's opcode is op
.input op
.decl value(var:Variable, val:Value)                // A variable's possible value set if known
.input value
.decl isBlock(b: Block)
.decl block(s: Statement, b: Block)
.input block

isBlock(b) :- block(_, b).

       
// Requires dominator, CALL, JUMPI, SSTORE relations.
.decl op_CALL(stmt:Statement, gas:Variable, target:Variable, value:Variable, data_start:Variable, data_length:Variable, return_start:Variable, return_length:Variable)
.input op_CALL
.decl op_JUMPI(stmt:Statement, dest:Variable, cond:Variable)
.input op_JUMPI
.decl op_SSTORE(stmt:Statement, loc:Variable, val:Variable)
.input op_SSTORE


// Place opcodes into various categories.
.decl unaryArith(opcode:Opcode)
unaryArith("ISZERO").
unaryArith("NOT").

.decl binArith(opcode:Opcode)
binArith("ADD").
binArith("MUL").
binArith("SUB").
binArith("DIV").
binArith("SDIV").
binArith("MOD").
binArith("SMOD").
binArith("EXP").
binArith("SIGNEXTEND").
binArith("LT").
binArith("GT").
binArith("SLT").
binArith("SGT").
binArith("EQ").
binArith("AND").
binArith("OR").
binArith("XOR").
binArith("BYTE").

.decl ternArith(opcode:Opcode)
ternArith("ADDMOD").
ternArith("MULMOD").

.decl runtimeKnowable(opcode:Opcode)
runtimeKnowable("ADDRESS").
runtimeKnowable("ORIGIN").
runtimeKnowable("CALLER").
runtimeKnowable("CALLVALUE").
runtimeKnowable("CALLDATASIZE").
runtimeKnowable("CODESIZE").
runtimeKnowable("GASPRICE").

.decl isThrow(stmt:Statement)
isThrow(stmt) :- op(stmt, "THROW").
isThrow(stmt) :- op(stmt, "THROWI").

// Dominance relations
// [p]dom(s, d) => s is [post-]dominated by d
// x is dominated by y if all paths from the root to x must go through y
// Post-domination is domination in the reversed cfg with an auxiliary node connected to all
// exit nodes.
.decl dom(s:Statement, d:Statement)
.input dom
.decl pdom(s:Statement, d:Statement)
.input pdom


// x controls whether y is executed.
.decl controls(x:Statement, y:Statement)
controls(x, y) :- edge(x, w1), edge(x, w2), pdom(w1, y), !reaches(w2, y).
controls(x, y) :- pdom(x, y), op(x, "THROWI").
//controls(x, z) :- controls(x, y), controls(y, z). // We probably don't want transitivity here?

// var is the guard variable of some conditional jump or throw stmt
.decl conditionVar(var: Variable, stmt:Statement)
conditionVar(var, stmt) :- op(stmt, "THROWI"), use(var, stmt, _).
conditionVar(var, stmt) :- op_JUMPI(stmt, _, var).

// x controls whether y executes by the value in cond
.decl controlsWith(x:Statement, y:Statement, cond:Variable)
controlsWith(x, y, cond) :- controls(x, y), conditionVar(cond, x).

// A statement is inaccessible if some condition controls it which is not manipulable by the caller.
// Or if it can't be reached from the program entry point.
.decl inaccessible(stmt:Statement)
inaccessible(stmt) :- controlsWith(_, stmt, cond), !manipulable(cond).
inaccessible(stmt) :- op(stmt, _), !reaches("0x0", stmt).       
// LOGIC

// p reaches q if there is a path from p to q in the CFG.
.decl reaches(p:Statement, q:Statement)
reaches(p, p) :- op(p, _).
reaches(p, q) :- edge(p, q).
reaches(p, q) :- edge(p, u), reaches(u, q).

// The value of x depends on the value of y
// I.e. y is used to calculate x, either directly as an input of the operation
// that defined x, or transitively.
.decl depends(x:Variable, y:Variable)
depends(x, x) :- use(x, _, _).
depends(x, x) :- def(x, _).
depends(x, y) :- def(x, stmt), use(y, stmt, _).
depends(x, z) :- depends(x, y), depends(y, z).


// var holds the result of executing the ORIGIN opcode
.decl originResult(var:Variable, stmt:Statement)
originResult(var, stmt) :- op(stmt, "ORIGIN"), def(var, stmt).

// var holds the result of executing the GAS opcode
.decl gasResult(var:Variable, stmt:Statement)
gasResult(var, stmt) :- op(stmt, "GAS"), def(var, stmt).

// var is the result of a CALL operation, stmt
.decl callResult(var:Variable, stmt:Statement)
callResult(var, stmt) :- op(stmt, "CALL"), def(var, stmt).

.decl stateReadResult(var:Variable, stmt:Statement)
stateReadResult(var, stmt) :- op(stmt, "SLOAD"), def(var, stmt).

// variable is used to store to state at stmt
.decl stateWriteUse(var:Variable, stmt:Statement)
stateWriteUse(var, stmt) :- op(stmt, "SSTORE"), use(var, stmt, _).

// Disjunction of previous relations.
.decl usedInStateOrCond(var:Variable, stmt:Statement)
usedInStateOrCond(var, stmt) :- conditionVar(var, stmt).
usedInStateOrCond(var, stmt) :- stateWriteUse(var, stmt).


// Basic concepts: entry/exit, basic blocks

.decl Entry(s:Statement)
.decl Exit(s:Statement)
.decl IsStatement(s:Statement)

.output Entry

IsStatement(s) :- op(s, _).

Entry(s) :- IsStatement(s), !edge(_,s).
Exit(s) :- IsStatement(s), !edge(s,_).

.decl IsJump(s:Statement)
IsJump(s) :- op(s, "JUMP").
IsJump(s) :- op(s, "JUMPI").

.decl JumpTarget(s:Statement)
JumpTarget(s) :- op(s, "JUMPDEST").

.decl BasicBlockBegin(s:Statement)
BasicBlockBegin(s) :- Entry(s).
BasicBlockBegin(s) :- JumpTarget(s).

.decl NextInSameBasicBlock(s:Statement, next:Statement)
NextInSameBasicBlock(s,next) :-
  edge(s,next), !BasicBlockBegin(next).
NextInSameBasicBlock(s,next) :-
  BasicBlockHead(s,next), edge(s,next).

.decl BasicBlockHead(s:Statement, head:Statement)
BasicBlockHead(s,s) :- BasicBlockBegin(s).
BasicBlockHead(s,h) :- BasicBlockHead(prev,h), NextInSameBasicBlock(prev,s).
 .plan 1:(2,1)


.output BasicBlockHead

// Reachability and Dominance

.decl CanReach(s:Statement, t:Statement)

CanReach(s,s) :- IsStatement(s).
CanReach(s,t) :- edge(s,t).
CanReach(s,t) :- CanReach(s,v), edge(v,t).


        //// ASSERTION
        .decl AssertStatementsReachable(s:Statement)
        .output AssertStatementsReachable
	    .decl HelperStatementsReachable(s:Statement)
        // there may be multiple entries
        HelperStatementsReachable(s) :-
          CanReach(entry,s), Entry(entry).
	    AssertStatementsReachable(s) :-
          IsStatement(s), !HelperStatementsReachable(s).


// defined on basic blocks, identified by their first instruction
.decl SuccessorBB(next:Statement, prev:Statement)
SuccessorBB(next,prev) :-
  BasicBlockHead(exitNode, prev),
  edge(exitNode,next).

.decl PredecessorBB(prev:Statement, next:Statement)
PredecessorBB(prev,next) :-
  SuccessorBB(next,prev).


        //// ASSERTION
        .decl AssertSuccessorWellDefined(s:Statement)
	    .output AssertSuccessorWellDefined
        AssertSuccessorWellDefined(s) :- SuccessorBB(s,_), !BasicBlockHead(_,s).


// Both arguments are basic block heads
// There is a path from the entry to s that does not go through candidate
.decl DoesNotDominate(candidate:Statement, s:Statement)
DoesNotDominate(candidate,s) :-
  Entry(s),
  BasicBlockHead(_, candidate).

DoesNotDominate(candidate,s) :-
  DoesNotDominate(candidate,other),
  SuccessorBB(s,other),
  s != candidate.

// Both arguments are basic block heads
// There is a path from s to the exit that does not go through candidate
.decl DoesNotPostDominate(candidate:Statement, s:Statement)
DoesNotPostDominate(candidate,s) :-
  Exit(exitNode),
  BasicBlockHead(exitNode,s),
  BasicBlockHead(_, candidate).

DoesNotPostDominate(candidate,s) :-
  DoesNotPostDominate(candidate,other),
  SuccessorBB(other,s),
  s != candidate.

// The Dominates/PostDominates relation is defined on basic blocks,
// represented by their first instruction (head). Defining
// a dense quadratic relation, like Dominates, on individual
// instructions would be expensive.
.decl Dominates(dominator:Statement, s:Statement)
Dominates(dominator,s) :-
  BasicBlockHead(_, dominator),
  BasicBlockHead(_, s),
  !DoesNotDominate(dominator,s).

.output Dominates

.decl PostDominates(postdominator:Statement, s:Statement)
PostDominates(postdominator,s) :-
  BasicBlockHead(_, postdominator),
  BasicBlockHead(_, s),
  !DoesNotPostDominate(postdominator,s).

.output PostDominates


//// Recognize structured loops

.decl StructuredLoopBackEdge(from:Statement, to:Statement)
.decl StructuredLoopHead(s:Statement)

StructuredLoopBackEdge(from,to),
StructuredLoopHead(to) :-
  edge(from,to),
  BasicBlockHead(from,h),
  Dominates(to,h).

// Detect a loop body *without* also capturing surrounding loops (i.e., not just SCC)
.decl InStructuredLoop(s:Statement, loophead:Statement)
InStructuredLoop(backEdgeNode,loophead) :- StructuredLoopBackEdge(backEdgeNode,loophead).
InStructuredLoop(loophead,loophead) :- StructuredLoopHead(loophead).
// Can reach back edge node without going through loop head!
InStructuredLoop(s,loophead) :-
  InStructuredLoop(other,loophead),
  edge(s,other),
  other != loophead.

.output StructuredLoopHead
.output InStructuredLoop

.decl ContainsInnerStructuredLoop(loophead:Statement,innerLoopHead:Statement)
ContainsInnerStructuredLoop(loophead,innerLoopHead) :-
  StructuredLoopHead(loophead),
  StructuredLoopHead(innerLoopHead),
  InStructuredLoop(innerLoopHead,loophead),
  innerLoopHead != loophead.
  
.decl InnermostStructuredLoop(loophead:Statement)
InnermostStructuredLoop(loophead) :-
  StructuredLoopHead(loophead),
  !ContainsInnerStructuredLoop(loophead,_).

.output InnermostStructuredLoop

// The most general definition of a loop-like structure: in same SCC
.decl InLoop(s:Statement, t:Statement)
InLoop(s,t) :-
  CanReach(s,t),
  CanReach(t,s),
  s != t.

        //// ASSERTION
        .decl AssertLoopsAreStructured(s:Statement)
	    .output AssertLoopsAreStructured
        AssertLoopsAreStructured(h) :-
		  BasicBlockHead(_,h),
		  InLoop(h,_),
		  !InStructuredLoop(h,_).


// statement is a binary operator and has two distinct argument variables
.decl distinctArgs2(stmt:Statement, op1:Variable, op2:Variable)
distinctArgs2(stmt, op1, op2) :- op(stmt, opcode), binArith(opcode),
                                 use(op1, stmt, _), use(op2, stmt, _), op1 != op2.
// statement is a ternary operator and has at least two distinct argument variables
.decl twoDistinctArgs3(stmt:Statement, op1:Variable, op2:Variable)
twoDistinctArgs3(stmt, op1, op2) :- op(stmt, opcode), ternArith(opcode),
                                    use(op1, stmt, _), use(op2, stmt, _), op1 != op2.
// statement is a ternary operator and has three distinct argument variables
.decl distinctArgs3(stmt:Statement, op1:Variable, op2:Variable, op3:Variable)
distinctArgs3(stmt, op1, op2, op3) :- op(stmt, opcode), ternArith(opcode),
                                      use(op1, stmt, _), use(op2, stmt, _), use(op3, stmt, _),
                                      op1 != op2, op1 != op3, op2 != op3.
// Note: distinctArgs3 => twoDistinctArgs3 but not vice versa.

.decl manipulable(var:Variable)
// A variable with a known value is "manipulable" in the sense that we can predict its value.
manipulable(var) :- value(var, _).

// We will also consider address values which have been masked out to be manipulable, as they are zero in their meaningful portion.
manipulable(var) :- manipulableAddress(var).

// A variable is "manipulable" if it can be set by the transaction source
manipulable(var) :- def(var, stmt), op(stmt, opcode), runtimeKnowable(opcode).

// Or if it's a call data load whose address is itself also settable by the transaction source.
manipulable(var) :- def(var, stmt), op(stmt, "CALLDATALOAD"), use(addressVar, stmt, _), manipulable(addressVar).

// Transitively, if it's the result of applying an operation to manipulable operands.
// unary operators
manipulable(var) :- def(var, stmt), op(stmt, opcode), unaryArith(opcode), use(operand, stmt, _), manipulable(operand).

// binary operators
manipulable(var) :- def(var, stmt), op(stmt, opcode), binArith(opcode),
                    distinctArgs2(stmt, op1, op2), manipulable(op1), manipulable(op2).
manipulable(var) :- def(var, stmt), op(stmt, opcode), binArith(opcode),
                    use(operand, stmt, _), manipulable(operand), !distinctArgs2(stmt, _, _).
// ternary operators
manipulable(var) :- def(var, stmt), op(stmt, opcode), ternArith(opcode),
                    distinctArgs3(stmt, op1, op2, op3), manipulable(op1), manipulable(op2), manipulable(op3).
manipulable(var) :- def(var, stmt), op(stmt, opcode), ternArith(opcode),
                    twoDistinctArgs3(stmt, op1, op2), manipulable(op1), manipulable(op2), !distinctArgs3(stmt, _, _, _).
manipulable(var) :- def(var, stmt), op(stmt, opcode), ternArith(opcode),
                    use(operand, stmt, _), manipulable(operand), !twoDistinctArgs3(stmt, _, _).

// A variable whose value is masked out in the lower 20 bytes is considered constant for addressing purposes
.decl manipulableAddress(var:Variable)
manipulableAddress(var) :- def(var, stmt), op(stmt, "AND"), use(mask, stmt, _),
			   value(mask, "0xffffffffffffffffffffffff0000000000000000000000000000000000000000").

// Finally, if a variable was recovered from some storage location which can be written with a manipulable
// value at some accessible program point, it's manipulable.
// Possible improvements: check if the stateLocVar is manipulable, rather than just constant
//                        check that the state location was not overwritten on some incoming path from the root
//                        with an unmanipulable value.

// var is read from a possibly-nonmanipulable-because-inaccessible state location written at storeStmt
.decl possAccessManipState(var:Variable, storeStmt:Statement)
possAccessManipState(var, storeStmt) :- stateReadResult(var, stateReadStmt),
		     	                use(stateLocVar, stateReadStmt, _),
			     	        op_SSTORE(storeStmt, stateLocVar2, stateVal),
                                        value(stateLocVar, stateLoc), value(stateLocVar2, stateLoc),
					manipulable(stateVal), !inaccessible(storeStmt).

// A manipulable value which is non-constant, i.e. input-dependent.
.decl nonConstManipulable(var:Variable)
nonConstManipulable(var) :- manipulable(var), !value(var, _).


